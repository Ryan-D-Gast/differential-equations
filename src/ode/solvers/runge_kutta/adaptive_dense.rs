//! Adaptive Runge-Kutta method with high order dense output via embedded stages.

use crate::adaptive_dense_runge_kutta_method;

adaptive_dense_runge_kutta_method!(
    /// Verner's 6(5) method is 6th order method with a embedded 5th order for
    /// error estimation and 5th order interpolation via dense output.
    /// 
    /// This is an efficient 9-stage method with embedded 5th order error estimation
    /// and continuous 5th order interpolation requiring one additional stage.
    /// 
    /// The method has excellent stability properties and high-quality dense output
    /// that makes it suitable for problems requiring accurate solutions at 
    /// intermediate points between steps.
    /// 
    /// Source: [Verner's Website](https://www.sfu.ca/~jverner/RKV65.IIIXb.Efficient.00000144617.081204.RATOnWeb)
    name: RKV65,
    a: [
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.6e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1923996296296296296296296296296296296296e-1, 0.7669337037037037037037037037037037037037e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.35975e-1, 0.0, 0.107925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.318683415233148260919747276431735612861, 0.0, -5.042058063628562225427761634715637693344, 4.220674648395413964508014358283902080483, 0.0, 0.0, 0.0, 0.0, 0.0],
        [-41.87259166432751461803757780644346812905, 0.0, 159.4325621631374917700365669070346830453, -122.1192135650100309202516203389242140663, 5.531743066200053768252631238332999150076, 0.0, 0.0, 0.0, 0.0],
        [-54.43015693531650433250642051294142461271, 0.0, 207.0672513650184644273657173866509835987, -158.6108137845899991828742424365058599469, 6.991816585950242321992597280791793907096, -0.1859723106220323397765171799549294623692e-1, 0.0, 0.0, 0.0],
        [-54.66374178728197680241215648050386959351, 0.0, 207.9528062553893734515824816699834244238, -159.2889574744995071508959805871426654216, 7.018743740796944434698170760964252490817, -0.1833878590504572306472782005141738268361e-1, -0.5119484997882099077875432497245168395840e-3, 0.0, 0.0],
        [0.3438957868357036009278820124728322386520e-1, 0.0, 0.0, 0.2582624555633503404659558098586120858767, 0.4209371189673537150642551514069801967032, 4.405396469669310170148836816197095664891, -176.4831190242986576151740942499002125029, 172.3641334014150730294022582711902413315, 0.0]
    ],
    b: [
        [0.3438957868357036009278820124728322386520e-1, 0.0, 0.0, 0.2582624555633503404659558098586120858767, 0.4209371189673537150642551514069801967032, 4.405396469669310170148836816197095664891, -176.4831190242986576151740942499002125029, 172.3641334014150730294022582711902413315, 0.0],
        [0.4909967648382489730906854927971225836479e-1, 0.0, 0.0, 0.2251112229516524153401395320539875329485, 0.4694682253029562039431948525047387412553, 0.8065792249988867707634161808995217981443, 0.0, -0.6071194891777959797672951465256217122488, 0.5686113944047569241147603178766138153594e-1]
    ],
    c: [
        0.0, 
        0.6e-1, 
        0.9593333333333333333333333333333333333333e-1, 
        0.1439, 
        0.4973, 
        0.9725, 
        0.9995, 
        1.0, 
        1.0
    ],
    order: 6,
    stages: 9,
    dense_stages: 10,
    extra_stages: 1,
    a_dense: [
        [0.1652415901357280684383619367363197852645e-1, 0.0, 0.0, 0.3053128187514178931377105638345583032476, 0.2071200938201978848991082158995582390341, -1.293879140655123187129665774327355723229, 57.11988411588149149650780257779402737914, -55.87979207510932290773937033203265749155, 0.2483002829776601348057855515823731483430e-1, 0.0]
    ],
    c_dense: [0.5],
    b_dense: [
        [1.0, -5.308169607103576297743491917539437544903, 10.18168044895868030520877351032733768603, -7.520036991611714828300683961994073691563, 0.9340485368631160925057442706475838478288, 0.7468671915770650884224462998058729264688],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 6.272050253212501244827865529084399503479, -16.02618147467745958442607061022576892601, 12.84435632451961742214954703737612797249, -1.148794504476759027536609501260874665600, -1.683168143014549714548776645115271798480],
        [0.0, 6.876491702846304590450466371720363234704, -24.63576726084633318864583120149461053641, 33.21078648379717088772133447477731248517, -17.49461528263643828092150992351036511970, 2.464041475806649706459795429914280132942],
        [0.0, -35.54445171059960218765875699270358093032, 165.7016170190242105108446269288474846144, -385.4635395491142731464726480659809841649, 442.4324137015701845319394642134164121973, -182.7206429912112095385038492673822360516],
        [0.0, 1918.654856698011449175045220651610014945, -9268.121508966042500195164712930044037430, 20858.33702877255011893787944928058522511, -22645.82767158481047968149020787687967272, 8960.474176055992754148556156624828257597],
        [0.0, -1883.069802132718312960582779305006646556, 9101.025187200633795903395040749471730528, -20473.18855195953591834830509979123557878, 22209.76555125653413900516974418122400018, -8782.168250963498630570274647563263264047],
        [0.0, 0.1190247963512364356614756628348873476063, -0.1250269670503937512118264468821359362429, 1.779956919394999075328101026471971070697, -4.660932123043762639666625363637083723091, 2.886977374347920879888875121212361241030],
        [0.0, -8.0, 32.0, -40.0, 16.0, 0.0]
    ]
);

adaptive_dense_runge_kutta_method!(
    /// Verner's 9(8) method is 9th order method with a embedded 8th order for
    /// error estimation and 9th order interpolation via dense output.
    /// 
    /// This is an efficient 16-stage method with embedded 8th order error estimation
    /// and continuous the order interpolation requiring 10 additional stages.
    /// 
    /// The method has excellent stability properties and high-quality dense output
    /// that makes it suitable for problems requiring accurate solutions at 
    /// intermediate points between steps.
    /// 
    /// Source: [Verner's Website](https://www.sfu.ca/~jverner/RKV98.IIa.Efficient.00000034399.240407.BetterEfficientonWebRKV98.IIa.Efficient.00000034399.240407.BetterEfficientonWeb)
    name: RKV98,
    a: [
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.3571e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [-0.3833735636677017025757228807792426014327e-1, 0.1373976372794443109781951935678287173575, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.3714760534225280277023358955871417145532e-1, 0.0, 0.1114428160267584083107007686761425143660, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [2.674764429871505119194043347886848033362, 0.0, -9.982382134885293836441318015951354323506, 7.921017705013788717247274668064506290145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5242104050577351069841401193318449756747e-1, 0.0, 0.0, 0.1796911189175953081279466649977364298948, 0.6237879371938568368073519721078917943307e-3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1592492223647632083060991150129732726703, 0.0, 0.0, -0.4298429877241087508189185066909803751595, 0.6665266542726088051243445942394404211672e-1, 0.7578051525715219863372169033510342411158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.7283333333333333333333333333333333333333e-1, 0.0, 0.0, 0.0, 0.0, 0.3359344590665103678713422141936031057620, 0.2467322076001562987953244524730635609046, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.729755859375e-1, 0.0, 0.0, 0.0, 0.0, 0.3348009729699333533129043555243262838993, 0.1184158239050666466870956444756737161007, -0.345673828125e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.4911213663452096382929799914888692571185e-1, 0.0, 0.0, 0.0, 0.0, 0.3983857361308652347066808423646954244674e-1, 0.1069675288939354812077139476183615284408, -0.2174259165458647598455650055976622663086e-1, -0.1055956474869564925231235304439517699685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [-0.2707988818641280489175862864774930636734e-1, 0.0, 0.0, 0.0, 0.0, 0.333e-1, -0.1645526070036057075627040519129748090051, 0.3428266306497389946775103799535438271025e-1, 0.1585264064439221046855989221358760453749, 0.2185234256811225083011127204294936872873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5584657769108862727526281006220448941548e-1, 0.0, 0.0, 0.0, 0.0, 0.9166533166672539087479545790553151183505e-1, 0.2392399655523627049569179599100121305027, 0.1023834712248414879740316672186561113729e-1, -0.2679331322859542442991625976085644567159e-2, 0.4235624181474284646680744174197106205439e-1, 0.2253970470166604185504274586005888014087, 0.0, 0.0, 0.0, 0.0, 0.0],
        [-0.4802510512725195893103945790000307739284, 0.0, 0.0, 0.0, 0.0, -6.359610162555930097843606206238737368598, -0.2762313898040841385163666588363199062208, -6.500796633979846747011407331804389650124, 0.5734765877040956875980719881692630407295, 1.347125994868138849716719646646049357523, 5.936840409706221306933249144503479736029, 6.590346245333924728433733996560685564589, 0.0, 0.0, 0.0, 0.0],
        [0.3307533067671401079975082476263855100019, 0.0, 0.0, 0.0, 0.0, 5.956207776829962111958631943398154563177, -0.4868316400481527952968983900652017328476, 4.462055288206771191616083778225319083232, 0.7410258231442071778525406966672954745201, -0.7118192034575913119318346652024763899638, -5.454619594516665440649148499095762263275, -4.140803729244709693305868672684077643030, 0.2038319723190386517589855611303633981843, 0.0, 0.0, 0.0],
        [-0.5847111122998944389651719860007729221315, 0.0, 0.0, 0.0, 0.0, -12.41268417116267068926060969930886386670, 1.360245445660928146977003413153919520189, -22.42610531111868229005965344123311160860, -0.8828857055865458252669099251378431470909, 1.770155128538230466813900572142546329490, 12.15809651918533877218739262890752294243, 22.23037520407760703834156132941550000589, -0.6634483760201249006317401316871863808959, 0.4509623787258137198642272397482891274306, 0.0, 0.0],
        [1.940575549810648717395482898478643635949, 0.0, 0.0, 0.0, 0.0, 21.97798408114556310164832153356570429956, 0.8230747326984728145128172720328075817426, 68.16441683626354817206843139989369741474, -3.117097463620266666801525529574905518624, -4.568841021822439620303730003755793384193, -18.74190987126264955904919353670543412590, -66.57711839637831878350036856645874492472, 1.098915553165441824029764532524025021446, 0.0, 0.0, 0.0]
    ],
    b: [
        [0.15006690149797247957662887123770409800223878439125635509305e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.05518099274638127859438168508018447470958212998793507706900, 0.238494726378218311263814055777485195395241336180778947138354, 0.128815177428299135462251588714408117237111752488648622524665, 0.227662311104621561461491789666574650857365714720222465635242, 1.22953258743751744316032181517357642189586257623541890214594, 0.462497666281038348739730827525612863770345382666305044524257e-1, 0.138619631936629390362830862120184349246824228027665359337989, 0.308001016831943540520356037516240438999181056294446403250787e-1, 0.0],
        [0.1897210532481101330735875918987801428423e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.408110314549493848404398964228060776034, 0.1260323883820920906560270507988839661845, 0.1188375063451149770930378540709095182997, 0.2491041997838687569190073177760326138188, -3.269966219928978218713853055139116510335, 0.3023798100228882907409723963501699715077, 0.0, 0.0, 0.4652989552070924159305071272518165020637e-1]
    ],
    c: [
        0.0, 
        0.3571e-1, 
        0.9906028091267414072062290548990445721420e-1, 
        0.1485904213690112110809343582348566858213, 
        0.6134, 
        0.2327359473605626756631680289030288192566, 
        0.5538640526394373243368319710969711807434, 
        0.6555, 
        0.491625, 
        0.6858e-1, 
        0.253, 
        0.6620641795412045944786226689660879617864, 
        0.8309, 
        0.8998, 
        1.0, 
        1.0
    ],
    order: 9,
    stages: 16,
    dense_stages: 26,
    extra_stages: 10,
    a_dense: [
        [0.15006690149797247957662887123770409800223878439125635509305e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.05518099274638127859438168508018447470958212998793507706900, 0.238494726378218311263814055777485195395241336180778947138354, 0.128815177428299135462251588714408117237111752488648622524665, 0.227662311104621561461491789666574650857365714720222465635242, 1.22953258743751744316032181517357642189586257623541890214594, 0.462497666281038348739730827525612863770345382666305044524257e-1, 0.138619631936629390362830862120184349246824228027665359337989, 0.308001016831943540520356037516240438999181056294446403250787e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1571801061417788021580499748292804743973e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4853403452657363080900487157345670578815, 0.2107787568904546684574678306538806242458, 0.1269802413053354152906551816812865612400, 0.2319687014513919157472314236852033704833, -0.3620214714069096774945761015915844860748, 0.5366106712036344076786687672191174826870e-1, -0.2806066613385549629370667652641771053798e-1, -0.2378121372710330174923994809623697280793e-1, 0.0, 0.0269180426192898898899003571020818065549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1569705832522204237038521016179271074328e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4616075242202111936044636619654233606961, 0.2113946516698113234089715994366982070261, 0.1270330917167109232354671760560477406684, 0.2318540550298708286361100159494550129997, -0.3385266406688372942274816228586594758312, 0.5298251972194235542699858758068190007453e-1, -0.2750461365887187780272257875389040879148e-1, -0.2361906185395527177468217904834875318962e-1, 0.0, 0.0266845808950403618669439152114535932838, 0.0113968346028554152555462142993461123204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1438964884291216402951708307100553583630e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.206901219123788519767229935392578222389, 0.2505628554639376294459724790398627595052, 0.1303332915702127271150218433265955255131, 0.2246717759263522068724895908997148014087, 1.308419325781946480763221457213122900404, 0.2589750180376235922034567811002287469857e-2, 0.8070743254562856892787425005539711000810e-2, -0.1267568255392829384757055330207124946149e-1, 0.0, 0.0112915807237332167599277307786524935533, 0.0342205668070974978749102738548263581380, -0.1149726368734142020610819623056729009783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1452348029801041972968851600082942318526e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5214243102465818231380106106018875132310, 0.1866698844204603947548300448071067931901, 0.1299316354451273004594203171440036506875, 0.2262141085765719298250459612902177827497, 0.6104582639466710747030070634860296980845, 0.1418715607022412453299982942636029187870e-1, 0.1480061054412245756808618945399364705863e-1, -0.3711471609871774475268028540581604884370e-2, 0.0, 0.0013932569795725588903178895148993163760, 1.114731020624073270253135239909350910479, -1.021208555757145859230933049243060207745, -0.2795650792912340738723193626472621878286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.8711816186418632397551552134391273160887e-2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1532993247326560354009297246756198757646e-1, -0.1943250606288015181452523235039064995331e-2, 0.1072095950570478409673351209542485874475e-2, 0.2601233036074381124605301648955068308034e-3, -0.1817718521410219268803888649170562657549e-1, -0.9877668338996712912794853387601975290298e-3, -0.3332383192417756458522769371199819990865e-2, -0.8605833352714280922890371244764817761631e-3, 0.0, 0.0013928101438866506716295079626552682504, -0.1617419987897630058856682050471490927435, 0.1485156561306044255987175208430691701911, 0.0228905109525306200398263350851868229734, -0.0014297771691417791727008632589722312471, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.2710092628714179537584868171073201523422e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6923104986003885114772983986172611691902, -0.6725243132164494445073150422370697609664e-1, 0.8808440659269460280192719417821072306037e-1, 0.5982566312199630889836790781586188392095e-1, -0.8251290314815523858109567180972702723517, -0.4886453387508305661509501250020800230341e-1, -0.1682608371566511953625070499451460275789, -0.4443170503743608176862370639456174098455e-1, 0.0, 0.0703784463943278023888550048434358574271, -8.818686397504859095347055843377871115177, 8.028821919603921347277176943010114087042, 1.306591406499157862229641342220359676579, -0.1624883307224014710941456378572112779619, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1466442426857961230207869561545353695312e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1898399561399124450873282966092465494738, 0.3711530651907537053995301753121055816571e-1, 0.1316247981199510429999180335475037001729, 0.1466622928822685713088228930531811168096, -0.2377331162467838377764310139745632904067, -0.2493071232192949761907468241344412740688e-1, -0.9427777049221307692559326299260474943801e-1, -0.2726667627690941070300686079610559177653e-1, 0.0, 0.0409765940406336206413367114252618193553, -5.538725321977494545432278985839620727708, 4.973442175247713118429917494679987165227, 0.8626294449189858956229369969895335684221, -0.2250213948217893084759073334350395278429, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1191252689920919922350166270042464848683e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6723137858130876080443132301001699876552, 0.1801284266825688933352476317750604591900, 0.1365689447449347163335592887842694005196, 0.2111038393798906615990851223053694372026, 0.7775854726244728792738759030556073621755, 0.2362117948505939633346199470372118351743e-1, 0.6391325607581230059121991748062989083367e-1, 0.1197654289246164466950805226357270574198e-1, 0.0, -0.0218862214508703180181634458196003524251, 3.500218060218659348421859254969160434525, -3.195765244251373581009030415350620096609, -0.5994401048600148264885439684062323011428, 0.0113771073722772937787322316388072156387, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.1184012014074604271397800922251586670558e-1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6641263289768790103963252230448945748496, 0.1788914061873194018510863179806909040625, 0.1367562642287085016908037148859544845819, 0.2107758119730286112356534765669813731420, 0.7679184744806335059253231677825531412084, 0.2313496869580297355994450248598930620113e-1, 0.6230605705999706953753333719939087802061e-1, 0.1157099029193866324646273674695267419004e-1, 0.0, -0.0212944160104218434457592374421639188155, 3.163166251075345445930896810245694869610, -2.819544872276817190650813744596266559171, -0.3978769046309758754403585402077121882020, 0.1304821777615737042415746721743137433164, 0.0, 0.0, 0.0, 0.0, 0.0]
    ],
    c_dense: [1.0, 0.7375018139988810429214526568476200466933, 0.749, 0.65, 0.487, 0.97e-2, 0.138, 0.249, 0.439, 0.794],
    b_dense: [
        [1.0, -60.67156499096275825192551363602396761243, 669.4173339890965298528834018742984105094, -3377.878946225199351520226690513332256243, 9286.468967391046692225695247237821541998, -14780.47713681102054116333940623447596217, 13604.99386328224720102647507806334531178, -6724.705443356114485986782323617396379907, 1381.867933411056511065177869712887072054],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, -0.5972167605668447080195299461102185885272, 47.93604836413167338885438264277611366496, -565.7170417002332153647406623941231321861, 2799.622707202858561151696501297251806365, -7032.161794919678731491945450324980521259, 9404.154583498766261417380396057323248088, -6374.661804344304055026346155757703309071, 1720.369337666279969354526136740485828512],
        [0.0, 0.1349844707960069717220566866826298984923, -10.83462914594452681222359026508445675428, 127.8648231869934298266652232809372858609, -632.7779367772187332338007906200698487630, 1589.427325412255464804263544956685619289, -2125.551246305557207529871063524735793374, 1440.817483665754881321490009540733392622, -388.8423097807010970369815759993713435843],
        [0.0, 0.7290747606753265739553888434183906298602e-1, -5.851972901033216313427390997286151384252, 69.06202973876299355875761438134035666890, -341.7744427162097135566927248434513873995, 858.4775271201373000458419246386670445384, -1148.047443579864082962792949259101806969, 778.2107496409214137189987901610599544952, -210.0205396013539280126185513768554408959],
        [0.0, 0.1288534847345785561116203329301814360204, -10.34252098059179829195550043573389974374, 122.0572110662541635697477898873947855333, -604.0372032137003894354892742901494195352, 1517.235637581122757484801301501208740856, -2029.008844152904067945761282194453917620, 1375.375645376320937242441893999796663414, -371.1811168501315596184350570113265596896],
        [0.0, 0.6958971720762387362164791425187492767466, -55.85670513574830649397484217620113261823, 659.1926340795728211557235694809221532847, -3262.215084140846354068888231363556701923, 8194.112807588290125367213373592291507372, -10958.03904467296551539422209426971705612, 7427.971576643475789982515741208313369971, -2004.632548946417281841423673799397312817],
        [0.0, 0.2617668058132623028300450746186815539953e-1, -2.101090775094604504096600471528167656924, 24.79601256660032039131082591571668336326, -122.7106039105787684003939157931166303491, 308.2275402436813943146648421712827254341, -412.1946451000669582597347477727378421190, 279.4085780645544831469608316472195929468, -75.40571800304908908412026712154566848821],
        [0.0, 0.7845665161262074618502665073713581595690e-1, -6.297381611696195354835186970953877598132, 74.31851847203782644803150125553425852543, -367.7877747056500197543410562506219227864, 923.8184599908639672968037927810710633244, -1235.428287659738944177317308989226766106, 837.4423716056154246604113713897017147785, -226.0057431111080504745753090041214216040],
        [0.0, 0.1743239982411997083542666099618776565927e-1, -1.399224563421080747566112426047905797818, 16.51294188206731169216889160389405043672, -81.71931133065192111822155020120302944168, 205.2645942498128099152915051189419910813, -274.5016441798805281613128379066882052764, 186.0725630195001464648099116049710397144, -50.21655137556766366195319885111250443823],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, -0.3120237034739356102149090910458972991542e-1, 2.505323513858665425821148146925028556689, -29.63209944182268891094187050958569485080, 147.1735748991918299269418428659506735081, -371.6682626297095949736614911358789582154, 500.8032537625967383990239072447982187459, -342.9490465144388046578978125156518258548, 93.79845878067124835173576681254714784020],
        [0.0, 1.005189184600557566129408870772027118073, -80.14524762849856177105235169139266835049, 904.2862871618540482735522275321299612604, -4159.377900797260916077366144135436208057, 9382.948440638739069789096069230867579132, -10865.07436232189535132287509765058944820, 6171.218731586134383883573674542623005216, -1354.861137823673230341057786698974248115],
        [0.0, -1.018790304892149008339208622085912341214, 81.22968543433086703732306275594490877087, -916.5220998408498750879913972119183817869, 4215.658051870923057302442161815205855483, -9509.908233268860695396133182984225322485, 11012.08866136426918043466675789153630399, -6254.720911673139287616309544212696219769, 1373.193636418218902334341350568238768134],
        [0.0, 0.1486756383162591888438322851466844348297e-1, -1.185413256701197518560901363041446866220, 13.37512808773948803650703726266929826638, -61.52057482048160294775557914196592133996, 138.7814224498311940264420678029949672145, -160.7032676951998445023342766109082536156, 91.27733347752088221300420564599480170832, -20.03949580654054522618693682425811381100],
        [0.0, -0.2611963106691748849299256055037070183077e-2, 0.2082557524387797755360510166314825074305, -2.349769034664475310156364256215305171863, 10.80805662268303734097853101791700152378, -24.38139559637047359365680950022456660620, 28.23266885539013812966436802211627788468, -16.03578301196446470276182164155397173990, 3.520578375594150109245344597384118672243],
        [0.0, 61.75136568508868110286254101938221664703, -750.1268910552884473493229930939554325311, 3898.685586244841930988256009725848784326, -10841.82272864745777154320543067614124209, 17321.57566462516617366130887449349951271, -15937.70492491813691151403407581204545506, 7853.047625862506649651583373646970497362, -1605.405697796720304997448299303558881367],
        [0.0, -1.934298042224096808013043975920800289243, 147.5886431665603647558155476856964112175, -1181.453462187681932247747922750006635641, 4124.816268317402451398433861948686547907, -7708.555106592447263782269817638341609752, 8052.349419898650085369881466158633077027, -4443.023055054952034626751291729687203499, 1010.211590494692425940651200300940213030],
        [0.0, 0.9126428307869666507744889095249555815836, -71.31710609019478576924959388866173624547, 695.4561446075446391059957659052646164863, -2620.882193436484363083577561241318740147, 4957.008141154350233563895859921266117993, -5038.298085544127560098020485475941711703, 2633.333935059078624368760947592332675986, -556.2134785809537547385794217224661779516],
        [0.0, -0.4654439970747991651050782556914121007009, 37.09099810444154184865658933003385399191, -417.1382228339854991229014922810663023285, 1920.758799061188217073321625257641207277, -4409.960156149581696033720218281819632770, 5383.383503749768100112081288811655341483, -3353.518501772742141737984950593448341369, 839.8490238379862770256522360126952858160],
        [0.0, -0.1176451708255218561268102928705214692156, 9.481894819354298841374880327580666327841, -114.9156758298319354820100563154045258044, 591.3193291312467068002224871165564177657, -1559.765475086581493834896780108830295683, 2198.545841718649266979102957216738477165, -1564.562048273728342299716850911579457005, 440.0137786917170208520501729678092387026]
    ]
);

/// Macro to create a Runge-Kutta solver with dense output capabilities
///
/// # Arguments
/// 
/// * `name`: Name of the solver struct to create
/// * `a`: Matrix of coefficients for intermediate stages
/// * `b`: 2D array where first row is higher order weights, second row is lower order weights
/// * `c`: Time offsets for each stage
/// * `order`: Order of accuracy of the method
/// * `stages`: Number of stages in the method
/// * `dense_stages`: Number of terms in the interpolation polynomial
/// * `extra_stages`: Number of additional stages for interpolation
/// * `a_dense`: Coefficients for additional stages needed for interpolation
/// * `c_dense`: Time offsets for additional interpolation stages
/// * `b_dense`: Coefficients for interpolation polynomial
///
/// # Note
/// 
/// This macro generates a full solver with the ability to interpolate the solution
/// at any point within a step. The interpolation capability requires additional
/// function evaluations but provides high-order continuous output.
/// 
#[macro_export]
macro_rules! adaptive_dense_runge_kutta_method {
    (
        $(#[$attr:meta])*
        name: $name:ident,
        a: $a:expr,
        b: $b:expr,
        c: $c:expr,
        order: $order:expr,
        stages: $stages:expr,
        // Interpolation info
        dense_stages: $dense_stages:expr,
        extra_stages: $extra_stages:expr,
        a_dense: $a_dense:expr,
        c_dense: $c_dense:expr,
        b_dense: $b_dense:expr
        $(,)? // Optional trailing comma
    ) => {
        $(#[$attr])*
        #[doc = "\n\n"]
        #[doc = "This adaptive solver with dense output was automatically generated using the `adaptive_dense_runge_kutta_method` macro."]
        pub struct $name<T: $crate::traits::Real, const R: usize, const C: usize, E: $crate::ode::EventData> {
            // Initial Step Size
            pub h0: T,

            // Current Step Size
            h: T,

            // Current State
            t: T,
            y: $crate::SMatrix<T, R, C>,
            dydt: $crate::SMatrix<T, R, C>,

            // Previous State
            h_prev: T,
            t_prev: T,
            y_prev: $crate::SMatrix<T, R, C>,
            dydt_prev: $crate::SMatrix<T, R, C>,

            // Stage values (fixed size array of matrices)
            k: [$crate::SMatrix<T, R, C>; $stages + $extra_stages], // Main stages + extra stages for interpolation

            // Constants from Butcher tableau
            a: [[T; $stages]; $stages],
            b_higher: [T; $stages],
            b_lower: [T; $stages],
            c: [T; $stages],
            
            // Interpolation coefficients
            a_dense: [[T; $stages + $extra_stages]; $extra_stages],  // Type inferred from a_dense
            c_dense: [T; $extra_stages],
            b_dense: [[T; $order]; $dense_stages],
            cont: [T; $dense_stages], // Interpolation polynomial coefficients

            // Settings
            pub rtol: T,
            pub atol: T,
            pub h_max: T,
            pub h_min: T,
            pub max_steps: usize,
            pub max_rejects: usize,
            pub safety_factor: T,
            pub min_scale: T,
            pub max_scale: T,
            
            // Iteration tracking
            reject: bool,
            n_stiff: usize,
            evals: usize, // Number of function evaluations
            steps: usize, // Number of steps taken

            // Status
            status: $crate::ode::SolverStatus<T, R, C, E>,
        }

        impl<T: $crate::traits::Real, const R: usize, const C: usize, E: $crate::ode::EventData> Default for $name<T, R, C, E> {
            fn default() -> Self {
                // Initialize k vectors with zeros
                let k: [$crate::SMatrix<T, R, C>; $stages + $extra_stages] = [$crate::SMatrix::<T, R, C>::zeros(); $stages + $extra_stages];

                // Initialize interpolation coefficient storage
                let cont: [T; $dense_stages] = [T::from_f64(0.0).unwrap(); $dense_stages];

                // Convert Butcher tableau values to type T
                let a_t: [[T; $stages]; $stages] = $a.map(|row| row.map(|x| T::from_f64(x).unwrap()));
                
                // Handle the 2D array for b, where first row is higher order and second row is lower order
                let b_higher: [T; $stages] = $b[0].map(|x| T::from_f64(x).unwrap());
                let b_lower: [T; $stages] = $b[1].map(|x| T::from_f64(x).unwrap());
                
                let c_t: [T; $stages] = $c.map(|x| T::from_f64(x).unwrap());

                // Convert interpolation coefficients
                let a_dense_t: [[T; $stages + $extra_stages]; $extra_stages] = $a_dense.map(|row| row.map(|x| T::from_f64(x).unwrap()));
                let c_dense_t: [T; $extra_stages] = $c_dense.map(|x| T::from_f64(x).unwrap());
                let b_dense_t: [[T; $order]; $stages + $extra_stages] = 
                    $b_dense.map(|row| row.map(|x| T::from_f64(x).unwrap()));

                $name {
                    h0: T::from_f64(0.0).unwrap(),
                    h: T::from_f64(0.0).unwrap(),
                    t: T::from_f64(0.0).unwrap(),
                    y: $crate::SMatrix::<T, R, C>::zeros(),
                    dydt: $crate::SMatrix::<T, R, C>::zeros(),
                    h_prev: T::from_f64(0.0).unwrap(),
                    t_prev: T::from_f64(0.0).unwrap(),
                    y_prev: $crate::SMatrix::<T, R, C>::zeros(),
                    dydt_prev: $crate::SMatrix::<T, R, C>::zeros(),
                    k,
                    a: a_t,
                    b_higher: b_higher,
                    b_lower: b_lower,
                    c: c_t,
                    a_dense: a_dense_t,
                    c_dense: c_dense_t,
                    b_dense: b_dense_t,
                    cont,
                    rtol: T::from_f64(1.0e-6).unwrap(),
                    atol: T::from_f64(1.0e-6).unwrap(),
                    h_max: T::infinity(),
                    h_min: T::from_f64(0.0).unwrap(),
                    max_steps: 10000,
                    max_rejects: 100,
                    safety_factor: T::from_f64(0.9).unwrap(),
                    min_scale: T::from_f64(0.2).unwrap(),
                    max_scale: T::from_f64(10.0).unwrap(),
                    reject: false,
                    n_stiff: 0,
                    evals: 0,
                    steps: 0,
                    status: $crate::ode::SolverStatus::Uninitialized,
                }
            }
        }

        impl<T: $crate::traits::Real, const R: usize, const C: usize, E: $crate::ode::EventData> $crate::ode::Solver<T, R, C, E> for $name<T, R, C, E> {
            fn init<F>(&mut self, ode: &F, t0: T, tf: T, y: &$crate::SMatrix<T, R, C>) -> Result<(), $crate::ode::SolverStatus<T, R, C, E>>
            where
                F: $crate::ode::ODE<T, R, C, E>,
            {
                // If h0 is zero, calculate initial step size using the utility function
                if self.h0 == T::zero() {
                    // Call standalone hinit function with order parameter
                    self.h0 = $crate::ode::solvers::utils::h_init(ode, t0, tf, y, $order, self.rtol, self.atol, self.h_min, self.h_max);
                    self.evals += 2; // hinit uses 2 evaluation
                }

                // Check bounds
                match $crate::ode::solvers::utils::validate_step_size_parameters(self.h0, self.h_min, self.h_max, t0, tf) {
                    Ok(h0) => self.h = h0,
                    Err(status) => return Err(status),
                }

                // Initialize Statistics
                self.reject = false;
                self.n_stiff = 0;

                // Initialize State
                self.t = t0;
                self.y = y.clone();
                ode.diff(t0, y, &mut self.dydt);
                self.evals += 1; // Initial derivative evaluation

                // Initialize previous state
                self.t_prev = t0;
                self.y_prev = y.clone();
                self.dydt_prev = self.dydt;

                // Initialize Status
                self.status = $crate::ode::SolverStatus::Initialized;

                Ok(())
            }

            fn step<F>(&mut self, ode: &F)
            where
                F: $crate::ode::ODE<T, R, C, E>,
            {
                // Make sure step size isn't too small
                if self.h.abs() < T::default_epsilon() {
                    self.status = $crate::ode::SolverStatus::StepSize(self.t, self.y);
                    return;
                }

                // Check if max steps has been reached
                if self.steps >= self.max_steps {
                    self.status = $crate::ode::SolverStatus::MaxSteps(self.t, self.y);
                    return;
                }
                self.steps += 1;

                // Save k[0] as the current derivative
                self.k[0] = self.dydt;
                
                // Compute stages
                for i in 1..$stages {
                    let mut y_stage = self.y;
                    
                    for j in 0..i {
                        y_stage += self.k[j] * (self.a[i][j] * self.h);
                    }
                    
                    ode.diff(self.t + self.c[i] * self.h, &y_stage, &mut self.k[i]);
                }
                self.evals += $stages - 1; // We already have k[0]
                
                // Compute higher order solution
                let mut y_high = self.y;
                for i in 0..$stages {
                    y_high += self.k[i] * (self.b_higher[i] * self.h);
                }
                
                // Compute lower order solution for error estimation
                let mut y_low = self.y;
                for i in 0..$stages {
                    y_low += self.k[i] * (self.b_lower[i] * self.h);
                }
                
                // Compute error estimate
                let err = y_high - y_low;
                
                // Calculate error norm using WRMS (weighted root mean square) norm
                let mut err_norm: T = T::zero();
                
                // Iterate through matrix elements
                for r in 0..R {
                    for c in 0..C {
                        let tol = self.atol + self.rtol * self.y[(r, c)].abs().max(y_high[(r, c)].abs());
                        err_norm = err_norm.max((err[(r, c)] / tol).abs());
                    }
                }
                
                // Determine if step is accepted
                if err_norm <= T::one() {
                    // Log previous state
                    self.t_prev = self.t;
                    self.y_prev = self.y;
                    self.dydt_prev = self.dydt;
                    self.h_prev = self.h;

                    if self.reject {
                        // Not rejected this time
                        self.n_stiff = 0;
                        self.reject = false;
                        self.status = $crate::ode::SolverStatus::Solving;
                    }

                    // Compute extra stages for dense / continious output via interpolation
                    for i in 0..$extra_stages {
                        let mut y_stage = self.y;
                        // Sum over the main stages
                        for j in 0..($stages + $extra_stages) {
                            y_stage += self.k[j] * (self.a_dense[i][j] * self.h);
                        }
                        
                        ode.diff(self.t + self.c_dense[i] * self.h, &y_stage, &mut self.k[$stages + i]);
                    }
                    self.evals += $extra_stages; // Extra stages for interpolation
                    
                    // Update state with the higher-order solution
                    self.t += self.h;
                    self.y = y_high;
                    ode.diff(self.t, &self.y, &mut self.dydt);
                    self.evals += 1; // Final derivative evaluation
                } else {
                    // Step rejected
                    self.reject = true;
                    self.status = $crate::ode::SolverStatus::RejectedStep;
                    self.n_stiff += 1;
                    
                    // Check for stiffness
                    if self.n_stiff >= self.max_rejects {
                        self.status = $crate::ode::SolverStatus::Stiffness(self.t, self.y);
                        return;
                    }
                }
                
                // Calculate new step size
                let order = T::from_usize($order).unwrap();
                let err_order = T::one() / order;
                
                // Standard step size controller formula
                let scale = self.safety_factor * err_norm.powf(-err_order);
                
                // Apply constraints to step size changes
                let scale = scale.max(self.min_scale).min(self.max_scale);
                
                // Update step size
                self.h *= scale;
                
                // Ensure step size is within bounds
                self.h = $crate::ode::solvers::utils::constrain_step_size(self.h, self.h_min, self.h_max);
            }

            fn interpolate(&mut self, t_interp: T) -> Result<$crate::SMatrix<T, R, C>, $crate::ode::InterpolationError<T, R, C>> {
                // Check if t is within bounds
                if t_interp < self.t_prev || t_interp > self.t {
                    return Err($crate::ode::InterpolationError::OutOfBounds(t_interp, self.t_prev, self.t));
                }

                // Calculate the normalized distance within the step [0, 1]
                let s = (t_interp - self.t_prev) / self.h_prev;
            
                // Compute the interpolation coefficients using Horner's method
                for i in 0..$dense_stages {
                    // Start with the highest-order term
                    self.cont[i] = self.b_dense[i][$order-1];
                    
                    // Apply Horner's method for polynomial evaluation
                    for j in (0..$order-1).rev() {
                        self.cont[i] = self.cont[i] * s + self.b_dense[i][j];
                    }
                    
                    // Multiply by s as all interpolation terms start at s^1
                    self.cont[i] *= s;
                }
            
                // Compute the interpolated value
                let mut y_interp = self.y_prev;
                for i in 0..($stages + $extra_stages) {
                    y_interp += self.k[i] * self.cont[i] * self.h_prev;
                }
                
                Ok(y_interp)
            }

            fn t(&self) -> T {
                self.t
            }

            fn y(&self) -> &$crate::SMatrix<T, R, C> {
                &self.y
            }

            fn t_prev(&self) -> T {
                self.t_prev
            }

            fn y_prev(&self) -> &$crate::SMatrix<T, R, C> {
                &self.y_prev
            }

            fn evals(&self) -> usize {
                self.evals
            }

            fn h(&self) -> T {
                self.h
            }

            fn set_h(&mut self, h: T) {
                self.h = h;
            }

            fn status(&self) -> &$crate::ode::SolverStatus<T, R, C, E> {
                &self.status
            }

            fn set_status(&mut self, status: $crate::ode::SolverStatus<T, R, C, E>) {
                self.status = status;
            }
        }

        impl<T: $crate::traits::Real, const R: usize, const C: usize, E: $crate::ode::EventData> $name<T, R, C, E> {
            /// Create a new solver with the specified initial step size
            pub fn new() -> Self {
                Self {
                    ..Default::default()
                }
            }
            
            /// Get the number of terms in the dense output interpolation polynomial
            pub fn dense_stages(&self) -> usize {
                $dense_stages
            }
            
            /// Set the relative tolerance for error control
            pub fn rtol(mut self, rtol: T) -> Self {
                self.rtol = rtol;
                self
            }
            
            /// Set the absolute tolerance for error control
            pub fn atol(mut self, atol: T) -> Self {
                self.atol = atol;
                self
            }

            /// Set the initial step size
            pub fn h0(mut self, h0: T) -> Self {
                self.h0 = h0;
                self
            }
            
            /// Set the minimum allowed step size
            pub fn h_min(mut self, h_min: T) -> Self {
                self.h_min = h_min;
                self
            }
            
            /// Set the maximum allowed step size
            pub fn h_max(mut self, h_max: T) -> Self {
                self.h_max = h_max;
                self
            }
            
            /// Set the maximum number of steps allowed
            pub fn max_steps(mut self, max_steps: usize) -> Self {
                self.max_steps = max_steps;
                self
            }
            
            /// Set the maximum number of consecutive rejected steps before declaring stiffness
            pub fn max_rejects(mut self, max_rejects: usize) -> Self {
                self.max_rejects = max_rejects;
                self
            }
            
            /// Set the safety factor for step size control (default: 0.9)
            pub fn safety_factor(mut self, safety_factor: T) -> Self {
                self.safety_factor = safety_factor;
                self
            }
            
            /// Set the minimum scale factor for step size changes (default: 0.2)
            pub fn min_scale(mut self, min_scale: T) -> Self {
                self.min_scale = min_scale;
                self
            }
            
            /// Set the maximum scale factor for step size changes (default: 10.0)
            pub fn max_scale(mut self, max_scale: T) -> Self {
                self.max_scale = max_scale;
                self
            }
            
            /// Get the order of the method
            pub fn order(&self) -> usize {
                $order
            }

            /// Get the number of stages in the method
            pub fn stages(&self) -> usize {
                $stages
            }
        }
    };
}